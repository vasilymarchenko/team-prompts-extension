{
  "version": "1.0.0",
  "lastUpdated": "2025-08-28",
  "categories": ["vscode", "backend", "frontend", "testing"],
  "prompts": [
    {
      "id": "what-is-extension",
      "keywords": ["what is", "explain extension", "vs code extension"],
      "title": "VS Code Extension Explanation",
      "prompt": "Explain what is a VS Code Extension. Include its key features, architecture components (activation events, contribution points, extension API), and common types of extensions (themes, language support, tools, etc.). Provide a comprehensive overview suitable for someone new to VS Code extension development.",
      "category": "vscode",
      "description": "Comprehensive explanation of VS Code extensions"
    },
    {
      "id": "create-extension",
      "keywords": ["create", "how to create", "build extension", "make extension"],
      "title": "Create VS Code Extension Guide",
      "prompt": "Provide a step-by-step guide on how to create a simple VS Code extension. Include prerequisites (Node.js, Yeoman), the scaffolding process using generator-code, explanation of key files (package.json, extension.ts), basic development workflow, testing in Extension Development Host, and publishing steps. Include code examples and best practices.",
      "category": "vscode",
      "description": "Complete guide for creating VS Code extensions"
    },
    {
      "id": "api-endpoint",
      "keywords": ["create api", "new endpoint", "rest api", "api design"],
      "title": "REST API Endpoint Creation",
      "prompt": "Provide a comprehensive guide for creating a REST API endpoint. Include proper HTTP methods, status codes, request/response structure, validation, error handling, authentication considerations, and testing strategies. Follow RESTful principles and include code examples.",
      "category": "backend",
      "description": "Guide for creating well-designed REST API endpoints"
    },
    {
      "id": "react-component",
      "keywords": ["react component", "create component", "frontend component"],
      "title": "React Component Development",
      "prompt": "Guide me through creating a reusable React component. Include proper TypeScript types, props interface, state management, lifecycle considerations, accessibility features, testing approaches, and documentation. Follow modern React best practices.",
      "category": "frontend",
      "description": "Best practices for React component development"
    },
    {
      "id": "unit-tests",
      "keywords": ["unit test", "testing", "write tests", "test coverage"],
      "title": "Unit Testing Best Practices",
      "prompt": "Provide guidance on writing effective unit tests. Include test structure (Arrange/Act/Assert), mocking strategies, test coverage considerations, naming conventions, and tools selection. Include examples for the current technology stack.",
      "category": "testing",
      "description": "Comprehensive unit testing guidelines"
    },
    {
      "id": "code-review",
      "keywords": ["code review", "review code", "pr review", "pull request"],
      "title": "Code Review Guidelines",
      "prompt": "Provide a comprehensive code review checklist and guidelines. Include what to look for in code quality, security considerations, performance implications, maintainability aspects, and how to provide constructive feedback. Focus on both technical and collaborative aspects.",
      "category": "process",
      "description": "Guidelines for effective code reviews"
    }
  ]
}